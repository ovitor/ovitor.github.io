<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>blog</title><link href="https://ovitor.github.io/" rel="alternate"></link><link href="https://ovitor.github.io/feeds/all.atom.xml" rel="self"></link><id>https://ovitor.github.io/</id><updated>2020-05-08T17:30:00-03:00</updated><subtitle></subtitle><entry><title>kubernetes with kind</title><link href="https://ovitor.github.io/posts/2020/05/kubernetes-with-kind/" rel="alternate"></link><published>2020-05-08T17:30:00-03:00</published><updated>2020-05-08T17:30:00-03:00</updated><author><name>Vitor Carvalho</name></author><id>tag:ovitor.github.io,2020-05-08:/posts/2020/05/kubernetes-with-kind/</id><summary type="html">&lt;p&gt;Kubernetes, at first sight may look overhelming, but, trust me, it should help you get the things done very quickly once you are used to it.&lt;/p&gt;</summary><content type="html">&lt;p&gt;To those who doesn't know Kubernetes yet, it helps operational and developers
teams to keep every thing related to containerized applications up to date and
running smootly in your infrastructure with minimal manually intervention. &lt;/p&gt;
&lt;p&gt;Kubernetes, at first sight may look overhelming, but, trust me, it should 
help you get the things done very quickly once you are used to it.&lt;/p&gt;
&lt;p&gt;To start, you could look at several places at Internet. Look at this list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/docs/home/"&gt;Kubernetes docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kelseyhightower/kubernetes-the-hard-way"&gt;Kubernetes the hard way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Kubernetes-Running-Dive-Future-Infrastructure-ebook/dp/B07YP1XSZ9/ref=pd_sbsd_14_1/137-9475426-0694937?_encoding=UTF8&amp;amp;pd_rd_i=B07YP1XSZ9&amp;amp;pd_rd_r=e067f55a-8432-4ec2-a567-5716a7f33e06&amp;amp;pd_rd_w=LnVM9&amp;amp;pd_rd_wg=W7D5v&amp;amp;pf_rd_p=2c2d0d3b-b3c5-4110-93fa-2c1270309ac1&amp;amp;pf_rd_r=AH49WE30Y4BM0PXJTWQP&amp;amp;psc=1&amp;amp;refRID=AH49WE30Y4BM0PXJTWQP"&gt;Kubernetes Up and Running - Dive into the future of infrastructure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I start with the oficial documentation and was a great starting point, then I pass to
kubernetes the hard way and finally this awesome book listed above.&lt;/p&gt;
&lt;p&gt;Almost every tutorial or even the official documentation prupose the use of
&lt;a href="https://kubernetes.io/docs/tasks/tools/install-minikube/"&gt;minikube&lt;/a&gt;, a tool
that creates a VM (using some hypervisor as VirtualBox) and install
kubernetes in it. It is a simple way, but too havy in my opnion. &lt;/p&gt;
&lt;p&gt;The way I like to study was using &lt;code&gt;kind&lt;/code&gt; or &lt;a href="https://kind.sigs.k8s.io/"&gt;kubernetes in
docker&lt;/a&gt;.  Who use Archlinux could install it from
AUR. At the official page, you can find instructions to install in macOS/Linux
or Windows. You must have installed in your system other tools like Docker and
kubectl (the last one isn't a dependency for kind, but you must have it to
manage the cluster created by &lt;em&gt;kind&lt;/em&gt;).&lt;/p&gt;
&lt;h2&gt;Starting using kind&lt;/h2&gt;
&lt;p&gt;After the installation you can starting creating your kubernetes cluster.
First, create a file into your $HOME named &lt;code&gt;kind-config.yaml&lt;/code&gt; that holds the
kind configuration. Like every thing in the kubernetes environment, you can
create a yaml file to hold the configs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# four nodes (three workers) cluster config&lt;/span&gt;
&lt;span class="n"&gt;kind:&lt;/span&gt; &lt;span class="n"&gt;Cluster&lt;/span&gt;
&lt;span class="n"&gt;apiVersion:&lt;/span&gt; &lt;span class="n"&gt;kind&lt;/span&gt;.&lt;span class="o"&gt;x-&lt;/span&gt;&lt;span class="n"&gt;k8s&lt;/span&gt;.&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v1alpha4&lt;/span&gt;
&lt;span class="n"&gt;nodes:&lt;/span&gt;
  - &lt;span class="n"&gt;role:&lt;/span&gt; &lt;span class="n"&gt;control-plane&lt;/span&gt;
  - &lt;span class="n"&gt;role:&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt;
  - &lt;span class="n"&gt;role:&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt;
  - &lt;span class="n"&gt;role:&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, run the following command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ kind create cluster --config kind-config.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The file tells the kind that we want a object of the kind Cluster and we want
to use the apiVersion v1alpha4. We also specify the number of nodes that we 
want to setup in our cluster. We could also specify a image to each one of the
nodes.&lt;/p&gt;
&lt;p&gt;After this, kind will download the base images from its docker hub and run the
images in your local environment. Check if the cluster is up by getting the 
nodes availables with &lt;code&gt;kind get nodes&lt;/code&gt;. You must see a list of nodes created
by the kind create command.&lt;/p&gt;
&lt;p&gt;Another important command it is the &lt;code&gt;kind get kubeconfig&lt;/code&gt;, it outputs in the
current terminal the kubeconfig file, necessary to use the &lt;code&gt;kubectl&lt;/code&gt; tool.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ kind get kubeconfig &amp;gt; ~/.kube/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Next steps..&lt;/h3&gt;
&lt;p&gt;The next step we gonna see is how to interact with the new cluster. We must use
the &lt;code&gt;kubectl&lt;/code&gt; tool. This is a content to another post. &lt;/p&gt;</content><category term="system administration"></category><category term="kubernetes"></category><category term="docker"></category></entry><entry><title>creating a blog with pelican and github io pages</title><link href="https://ovitor.github.io/posts/2016/11/creating-a-blog-with-pelican-and-github-io-pages/" rel="alternate"></link><published>2016-11-24T18:52:00-03:00</published><updated>2019-11-02T19:30:00-03:00</updated><author><name>Vitor Carvalho</name></author><id>tag:ovitor.github.io,2016-11-24:/posts/2016/11/creating-a-blog-with-pelican-and-github-io-pages/</id><summary type="html">&lt;p&gt;So I decided to create a blog and write about my learning process in a feel areas.  My first post will be how I end up with a blog with &lt;a href="http://getpelican.com/" target="_blank"&gt;Pelican&lt;/a&gt; - a static site generator - that was written in Python language.&lt;/p&gt;</summary><content type="html">&lt;p&gt;So I decided to create a blog and write about my learning process in a feel areas.
My first post will be how I end up with a blog with &lt;a href="http://getpelican.com/" target="_blank"&gt;Pelican&lt;/a&gt;
- a static site generator - that was written in Python language.&lt;/p&gt;
&lt;p&gt;My skills in development are mainly in Python, so I look up for a tool that help me
to maintain a blog and the search ends with this Pelican tool. I started to read the 
manual (RTFM!) and to begin you will need Python version 2.7.x or 3.3+. Here I'm using poetry
to help me keep my environment clean.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ mkdir ~/blog &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ~/blog
$ poetry init &lt;span class="c1"&gt;# you will have to answer some questions choose no when asked to define dependencies&lt;/span&gt;
$ poetry shell
$ poetry add pelican Markdown 
$ pelican-quickstart 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will have to answer several questions about your blog after the &lt;code&gt;pelican-quickstart&lt;/code&gt;
command. Answer &lt;strong&gt;Yes&lt;/strong&gt; when asked to upload your blog using GitHub Pages.
Then, you can run the development server delivered with Pelican. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pelican -rl 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Done! Now you have a blog to work with. Your articles and posts will be saved in
&lt;code&gt;content&lt;/code&gt; directory. You can create a file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ touch content/simple-article.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's see a content sample blog post &lt;code&gt;simple-article.md&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Nice&lt;/span&gt; &lt;span class="n"&gt;simple&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; 
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;

&lt;span class="n"&gt;Write&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;important&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since you have ran the development server (with auto-reload option enabled), the file will be 
automatically refreshed and you can access &lt;a href="http://localhost:8000" target="_blank"&gt;localhost:8000&lt;/a&gt;. 
Very nice.&lt;/p&gt;
&lt;h3&gt;Publishing your site&lt;/h3&gt;
&lt;p&gt;Now let's publish this blog within &lt;a href="https://pages.github.com/" target="_blank"&gt;Github Pages&lt;/a&gt;.
Create a new repository named &lt;code&gt;username.github.io&lt;/code&gt; and run the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ poetry add ghp-import
$ git init
$ git remote add origin &amp;lt;url-repository&amp;gt;
$ git checkout -b blog 
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;output&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; .gitignore
$ git add .
$ git commit -m &lt;span class="s2"&gt;&amp;quot;first commit&amp;quot;&lt;/span&gt;
$ git push origin blog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we have all the blog structure at github. Let's use &lt;code&gt;ghp-import&lt;/code&gt; to publish the blog.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make github
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Your blog is accessible by the link username.github.io. That is it.&lt;/p&gt;
&lt;p&gt;Things you can do by yourself&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change the default theme, using one of the listed in 
&lt;a href="http://www.pelicanthemes.com/" target="_blank"&gt;Pelican Themes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Edit the selected theme to your needs.&lt;/li&gt;
&lt;li&gt;Add some plugins to your blog. Read 
&lt;a href="https://github.com/getpelican/pelican-plugins" target="_blank"&gt;Pelican Plugins&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><category term="development"></category><category term="blog"></category><category term="pelican"></category><category term="python"></category><category term="github"></category></entry></feed>